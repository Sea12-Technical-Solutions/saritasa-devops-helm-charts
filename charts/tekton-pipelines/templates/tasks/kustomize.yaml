apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kustomize
spec:
  description: >-
    Updates image tag in the kustomize overlay of the app

  resources:
    inputs:
      - name: kubernetes-repo
        type: git

  params:
    - name: application
      type: string
      description: name of the argocd application we're going to deploy/sync
    
    - name: image
      type: string
      description: new image for the application
    
    - name: kustomize_overlay_path
      type: string
      description: overlay path for kustomize call
    
    - name: kubernetes_branch
      default: "main"
    
    - name: environment
      type: string
      description: environment name of the app being built, i.e. dev/staging/prod
  
  stepTemplate:
    envFrom:
      - configMapRef:
          name: $(params.application)-build-pipeline-config

  steps:
    - name: git-set-user
      image: {{ .Values.images.git | default "alpine/git:latest" }}
      imagePullPolicy: {{ .Values.imagePullPolicy }}
      workingDir: $(resources.inputs.kubernetes-repo.path)      
      script: |
        git config user.email "$DEVOPS_GROUP_EMAIL"
        git config user.name "tekton-kustomize"

    - name: update-image
      image: {{ .Values.images.awscli | default "k8s.gcr.io/kustomize/kustomize:latest"}}
      imagePullPolicy: {{ .Values.imagePullPolicy }}
      workingDir: $(resources.inputs.kubernetes-repo.path)
      script: |
        app=$(params.application)
        env=$(params.environment)
        application=${app%-$env}
        cd $(params.kustomize_overlay_path) && \
          /app/kustomize edit set image $application=$(params.image)
    
    - name: git-push
      image: {{ .Values.images.git | default "alpine/git:latest" }}
      imagePullPolicy: {{ .Values.imagePullPolicy }}
      workingDir: $(resources.inputs.kubernetes-repo.path)      
      script: |    
        # apply changes only if it exists, otherwise do nothing
        if [ ! `git status --porcelain` ]; then
          echo "There are no changes, nothing to commit"
          exit
        fi

        # the params.branch comes from github push event and looks like this: "refs/heads/staging"
        # so we had to get only the end of the string
        # branch=`echo $(params.branch)| awk -F\/ '$0=$3'`
        # git checkout $branch
        git commit -am "feat: $(params.environment) argocd deployment $(params.kustomize_overlay_path), new image: $(params.image)"
        # mkdir /root/.ssh && cp -r $HOME/.ssh/* /root/.ssh
        # git push
        git push origin HEAD:$(params.kubernetes_branch)
